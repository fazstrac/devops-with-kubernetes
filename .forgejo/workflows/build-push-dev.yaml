name: Build and Test Go Application
on:
  push:
    branches:
    - 'exercise/*'

env:
  GOPATH:  /home/runner/go/go_path
  GOCACHE: /home/runner/go/go_cache
  CGO_ENABLED: 0
  GOOS: linux

jobs:
  build-and-push-project:
    runs-on: linux_amd64
    strategy:
      matrix:
        app: [log-output/app1, log-output/app2, pong-app, project/todo-backend, project/todo-app]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Sanitize matrix key
        id: sanitize
        run: |
          SAFE_NAME=$(echo -n dwk-${{ matrix.app }} | sed 's/[^A-Za-z0-9]\+/-/g')
          COMMIT_TAG=$(echo -n dev-${{ env.FORGEJO_REF_NAME }} | sed 's/[^A-Za-z0-9\.]\+/-/g')
          echo "safe_name=$SAFE_NAME" >> $FORGEJO_OUTPUT
          echo "commit_tag=$COMMIT_TAG" >> $FORGEJO_OUTPUT
      # - name: Set up Go
      #   uses: actions/setup-go@v4
      #   with:
      #     go-version: '1.24.9'
      # # - name: Setup Node.js
      #   if: ${{ matrix.app == 'project/todo-app' }}
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '22'
      - name: Install Node.js dependencies
        if: ${{ matrix.app == 'project/todo-app' }}
        run: |
          cd ${{ matrix.app }}
          npx yarn install
      - name: Run frontend tests
        if: ${{ matrix.app == 'project/todo-app' }}
        run: |
          set -e
          cd ${{ matrix.app }}
          echo "Running JS frontend tests for ${{ matrix.app }}."
          npm run typecheck
          npm run test
      - name: Build frontend assets
        if: ${{ matrix.app == 'project/todo-app' }}
        run: |
          set -e
          cd ${{ matrix.app }}
          echo "Building JS frontend assets for ${{ matrix.app }}."
          npm run build
      - name: Install GO dependencies
        run: |
          cd ${{ matrix.app }}
          echo "Installing Go dependencies for ${{ matrix.app }}."
          go mod tidy
      - name: Run GO linter
        run: |
          cd ${{ matrix.app }}
          echo "Running Go linter for ${{ matrix.app }}."
          go vet ./...
      - name: Run GO tests
        run: |
          cd ${{ matrix.app }}
          mkdir -p artifacts
          APP=${{ steps.sanitize.outputs.safe_name }}
          COVERAGE_FILE=artifacts/coverage-${APP}.out
          go test -coverprofile ${COVERAGE_FILE} ./...
      - name: Build GO application
        run: |
          set -e
          cd ${{ matrix.app }}
          APP=${{ steps.sanitize.outputs.safe_name }}
          COMMIT_TAG=${{ steps.sanitize.outputs.commit_tag }}
          echo "Building application: $APP. SHA: ${{ env.FORGEJO_SHA }}. Tag: ${COMMIT_TAG}."
          podman build \
            --build-arg=COMMIT_SHA=${{ env.FORGEJO_SHA }} \
            --build-arg=COMMIT_TAG=${COMMIT_TAG} \
            --build-arg=DEBUG=true \
            --tag ${{ vars.DEV_REGISTRY_URL }}/${APP}:latest \
            --tag ${{ vars.DEV_REGISTRY_URL }}/${APP}:${{ env.FORGEJO_SHA }} \
            --tag ${{ vars.DEV_REGISTRY_URL }}/${APP}:${COMMIT_TAG} .
      - name: Push container image
        run: |
          set -e
          cd ${{ matrix.app }}
          APP=${{ steps.sanitize.outputs.safe_name }}
          COMMIT_TAG=${{ steps.sanitize.outputs.commit_tag }}
          echo "Pushing application: $APP."
          podman login ${{ vars.DEV_REGISTRY_URL }} --username ${{ vars.DEV_REGISTRY_USER }} --password ${{ secrets.DEV_REGISTRY_TOKEN }}
          podman push  ${{ vars.DEV_REGISTRY_URL }}/${APP}:latest && \
          podman push  ${{ vars.DEV_REGISTRY_URL }}/${APP}:${{ env.FORGEJO_SHA }} && \
          podman push  ${{ vars.DEV_REGISTRY_URL }}/${APP}:${COMMIT_TAG}
      - name: Upload artifacts
        uses: https://code.forgejo.org/forgejo/upload-artifact@v4
        with:
          name: artifacts-${{ steps.sanitize.outputs.safe_name }}.zip
          path: ${{ matrix.app }}/artifacts/
          retention-days: 30
      - name: Cleanup local images
        run: |
          set -e
          APP=${{ steps.sanitize.outputs.safe_name }}
          COMMIT_TAG=${{ steps.sanitize.outputs.commit_tag }}
          echo "Removing local images for application: $APP."
          podman image rm ${{ vars.DEV_REGISTRY_URL }}/${APP}:latest || true
          podman image rm ${{ vars.DEV_REGISTRY_URL }}/${APP}:${{ env.FORGEJO_SHA }} || true
          podman image rm ${{ vars.DEV_REGISTRY_URL }}/${APP}:${COMMIT_TAG} || true
