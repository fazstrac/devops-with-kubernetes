# Build stage
FROM golang:1.24.9-alpine AS builder

ARG COMMIT_SHA
ARG COMMIT_TAG
ARG DEBUG=false

WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Build the Go app (static binary)
RUN CGO_ENABLED=0 GOOS=linux sh -c '\
  LDFLAGS="-X main.COMMIT_SHA=${COMMIT_SHA} -X main.COMMIT_TAG=${COMMIT_TAG}"; \
  if [ "${DEBUG}" != "true" ]; then \
    LDFLAGS="-s -w -buildid= ${LDFLAGS}"; \
  fi; \
  go build -trimpath -ldflags "$LDFLAGS" -o server main.go app.go'

# Create a cache directory for the app. Possibly can be replaced with a volume
RUN mkdir -p /app/cache

# Final stage: distroless for certficates
FROM gcr.io/distroless/base-debian12
USER 1000:1000
ENV GIN_MODE=release

WORKDIR /app

COPY --from=builder /app/server .
COPY --from=builder --chown=1000:1000 /app/cache /app/cache
COPY --from=builder /app/templates /app/templates
COPY --from=builder /app/static /app/static

# Run the binary
ENTRYPOINT ["/app/server"]
